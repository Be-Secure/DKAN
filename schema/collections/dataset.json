{
  "id": "http://dkan/api/v1/schema/dataset",
  "title": "Project Open Data Dataset",
  "description": "The metadata format for all federal open data. Validates a single JSON object entry (as opposed to entire Data.json catalog).",
  "type": "object",
  "required": [
    "title",
    "description",
    "identifier",
    "accessLevel",
    "modified",
    "keyword"
  ],
  "properties": {
    "@type": {
      "title": "Metadata Context",
      "type": "string",
      "description": "IRI for the JSON-LD data type. This should be dcat:Dataset for each Dataset.",
      "default": "dcat:Dataset"
    },
    "title": {
      "title": "Title",
      "description": "Human-readable name of the asset. Should be in plain English and include sufficient detail to facilitate search and discovery.",
      "type": "string",
      "minLength": 1
    },
    "identifier": {
      "title": "Unique Identifier",
      "description": "A unique identifier for the dataset or API as maintained within an Agency catalog or database.",
      "type": "string",
      "minLength": 1
    },
    "description": {
      "title": "Description",
      "description": "Human-readable description (e.g., an abstract) with sufficient detail to enable a user to quickly understand whether the asset is of interest.",
      "type": "string",
      "minLength": 1
    },
    "accessLevel": {
      "description": "The degree to which this dataset could be made publicly-available, regardless of whether it has been made available. Choices: public (Data asset is or could be made publicly available to all without restrictions), restricted public (Data asset is available under certain use restrictions), or non-public (Data asset is not available to members of the public).",
      "title": "Public Access Level",
      "type": "string",
      "enum": [
        "public",
        "restricted public",
        "non-public"
      ],
      "default": "public"
    },
    "accrualPeriodicity": {
      "title": "Frequency",
      "description": "Frequency with which dataset is published.",
      "type": "string",
      "enum": [
        "R/P10Y",
        "R/P4Y",
        "R/P1Y",
        "R/P2M",
        "R/P3.5D",
        "R/P1D",
        "R/P2W",
        "R/P6M",
        "R/P2Y",
        "R/P3Y",
        "R/P0.33W",
        "R/P0.33M",
        "R/PT1S",
        "R/P1M",
        "R/P3M",
        "R/P0.5M",
        "R/P4M",
        "R/P1W",
        "R/PT1H",
        "irregular"
      ],
      "enumNames": [
        "Decennial",
        "Quadrennial",
        "Annual",
        "Bimonthly",
        "Semiweekly",
        "Daily",
        "Biweekly",
        "Semiannual",
        "Biennial",
        "Triennial",
        "Three times a week",
        "Three times a month",
        "Continuously updated",
        "Monthly",
        "Quarterly",
        "Semimonthly",
        "Three times a year",
        "Weekly",
        "Hourly",
        "Irregular"
      ]
    },
    "describedBy": {
      "title": "Data Dictionary",
      "description": "URL to the data dictionary for the dataset or API. Note that documentation other than a data dictionary can be referenced using Related Documents as shown in the expanded fields.",
      "type": "string",
      "format": "uri"
    },
    "describedByType": {
      "title": "Data Dictionary Type",
      "description": "The machine-readable file format (IANA Media Type or MIME Type) of the distribution’s describedBy URL.",
      "type": "string"
    },
    "issued": {
      "title": "Release Date",
      "description": "Date of formal issuance.",
      "type": "string"
    },
    "modified": {
      "title": "Last Update",
      "description": "Most recent date on which the dataset was changed, updated or modified.",
      "type": "string"
    },
    "license": {
      "title": "License",
      "description": "The license dataset or API is published with. See <a href=\"https://project-open-data.cio.gov/open-licenses/\">Open Licenses</a> for more information.",
      "type": "string",
      "format": "uri"
    },
    "spatial": {
      "title": "Spatial",
      "description": "The <a href=\"https://project-open-data.cio.gov/v1.1/schema/#spatial\">spatial coverage</a> of the dataset. Could include a spatial region like a bounding box or a named place.",
      "type": "string",
      "minLength": 1
    },
    "temporal": {
      "title": "Temporal",
      "description": "The <a href=\"https://project-open-data.cio.gov/v1.1/schema/#temporal\">start and end dates</a> for which the dataset is applicable, separated by a \"/\" (i.e., 2000-01-15T00:45:00Z/2010-01-15T00:06:00Z).",
      "type": "string"
    },
    "isPartOf": {
      "title": "Collection",
      "description": "The collection of which the dataset is a subset.",
      "type": "string",
      "minLength": 1
    },
    "publisher": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "https://project-open-data.cio.gov/v1.1/schema/organization.json#",
      "title": "Organization",
      "description": "A Dataset Publisher Organization.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "@type": {
          "title": "Metadata Context",
          "description": "IRI for the JSON-LD data type. This should be org:Organization for each publisher",
          "type": "string",
          "default": "org:Organization"
        },
        "name": {
          "title": "Publisher Name",
          "description": "",
          "type": "string",
          "minLength": 1
        },
        "subOrganizationOf": {
          "title": "Parent Organization",
          "type": "string"
        }
      }
    },
    "contactPoint": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "https://project-open-data.cio.gov/v1.1/schema/vcard.json#",
      "title": "Project Open Data ContactPoint vCard",
      "description": "A Dataset ContactPoint as a vCard object.",
      "type": "object",
      "required": [
        "fn",
        "hasEmail"
      ],
      "properties": {
        "@type": {
          "title": "Metadata Context",
          "description": "IRI for the JSON-LD data type. This should be vcard:Contact for contactPoint.",
          "enum": [
            "vcard:Contact"
          ],
          "type": "string"
        },
        "fn": {
          "title": "Contact Name",
          "description": "A full formatted name, e.g. Firstname Lastname.",
          "type": "string",
          "minLength": 1
        },
        "hasEmail": {
          "title": "Email",
          "description": "Email address for the contact name.",
          "pattern": "^mailto:[\\w\\_\\~\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\:.-]+@[\\w.-]+\\.[\\w.-]+?$|[\\w\\_\\~\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\:.-]+@[\\w.-]+\\.[\\w.-]+?$",
          "type": "string"
        }
      }
    },
    "theme": {
      "title": "Category",
      "description": "Main thematic category of the dataset.",
      "type": "array",
      "items": {
        "type": "string",
        "title": "Category",
        "minLength": 1
      },
      "uniqueItems": true
    },
    "keyword": {
      "title": "Tags",
      "description": "Tags (or keywords) help users discover your dataset; please include terms that would be used by technical and non-technical users.",
      "type": "array",
      "items": {
        "type": "string",
        "title": "Tag",
        "minLength": 1
      },
      "minItems": 1
    },
    "distribution": {
      "title": "Distribution",
      "description": "A container for the array of Distribution objects (data files).",
      "type": "array",
      "items": {
        "title": "Project Open Data Distribution",
        "type": "object",
        "properties": {
          "@type": {
            "title": "Metadata Context",
            "description": "IRI for the JSON-LD data type. This should be dcat:Distribution for each Distribution.",
            "default": "dcat:Distribution",
            "type": "string",
            "readOnly": true
          },
          "title": {
            "title": "Title",
            "description": "Human-readable name of the distribution.",
            "type": "string",
            "minLength": 1
          },
          "description": {
            "title": "Description",
            "description": "Human-readable description of the distribution.",
            "type": "string",
            "minLength": 1
          },
          "format": {
            "title": "Format",
            "description": "A human-readable description of the file format of a distribution (i.e. csv, pdf, xml, kml, etc.).",
            "type": "string",
            "examples": [
              "arcgis",
              "csv",
              "esri rest",
              "geojson",
              "json",
              "kml",
              "pdf",
              "tsv",
              "xls",
              "xlsx",
              "xml",
              "zip"
            ]
          },
          "mediaType": {
            "title": "Media Type",
            "description": "The machine-readable file format (<a href=\"https://www.iana.org/assignments/media-types/media-types.xhtml\">IANA Media Type or MIME Type</a>) of the distribution’s downloadURL.",
            "type": "string"
          },
          "downloadURL": {
            "title": "Download URL",
            "description": "URL providing direct access to a downloadable file of a dataset.",
            "type": "string",
            "format": "uri"
          },
          "accessURL": {
            "title": "Access URL",
            "description": "URL providing indirect access to a dataset.",
            "type": "string",
            "format": "uri"
          },
          "conformsTo": {
            "title": "Data Standard",
            "description": "URL providing indirect access to a dataset.",
            "type": "string",
            "format": "uri"
          },
          "describedBy": {
            "title": "Data Dictionary",
            "description": "URL to the data dictionary for the distribution found at the downloadURL.",
            "type": "string",
            "format": "uri"
          },
          "describedByType": {
            "title": "Data Dictionary Type",
            "description": "The machine-readable file format (IANA Media Type or MIME Type) of the distribution’s describedBy URL.",
            "pattern": "^[a-z]+?$",
            "type": "string"
          },
          "dataDictionary": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "title": "Data dictionary based on frictionless table schema",
            "description": "A partial table schema without a requirement for all resource fields to be specified; compliant with the [Table Schema](https://specs.frictionlessdata.io/table-schema/) specification.",
            "type": "object",
            "required": [
              "fields"
            ],
            "properties": {
              "fields": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "title": "Table Schema Field",
                  "type": "object",
                  "description": "The field contains strings, that is, sequences of characters.",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "title": "Name",
                      "description": "A name for this field.",
                      "type": "string"
                    },
                    "title": {
                      "title": "Title",
                      "description": "A human-readable title.",
                      "type": "string",
                      "examples": [
                        "{\n  \"title\": \"My Package Title\"\n}\n"
                      ]
                    },
                    "description": {
                      "title": "Description",
                      "description": "A text description. Markdown is encouraged.",
                      "type": "string",
                      "examples": [
                        "{\n  \"description\": \"# My Package description\\nAll about my package.\"\n}\n"
                      ]
                    },
                    "type": {
                      "description": "The type keyword, which `MUST` be a value of `string`.",
                      "enum": [
                        "string",
                        "number",
                        "integer",
                        "date",
                        "time",
                        "datetime",
                        "year",
                        "yearmonth",
                        "boolean",
                        "object",
                        "geopoint",
                        "geojson",
                        "array",
                        "duration",
                        "any"
                      ]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": { "type": { "const": "string" } }
                      },
                      "then": {
                        "properties": {
                          "format": {
                            "description": "The format keyword options for `string` are `default`, `email`, `uri`, `binary`, and `uuid`.",
                            "context": "The following `format` options are supported:\n  * **default**: any valid string.\n  * **email**: A valid email address.\n  * **uri**: A valid URI.\n  * **binary**: A base64 encoded string representing binary data.\n  * **uuid**: A string that is a uuid.",
                            "enum": [
                              "default",
                              "email",
                              "uri",
                              "binary",
                              "uuid"
                            ],
                            "default": "default"
                          }
                        }
                      }
                    },
                    {
                      "if": {
                        "properties": { "type": { "const": "number" } }
                      },
                      "then": {
                        "properties": {
                          "format": {
                            "description": "There are no format keyword options for `number`: only `default` is allowed.",
                            "enum": [
                              "default"
                            ],
                            "default": "default"
                          }
                        }
                      }
                    },
                    {
                      "if": {
                        "properties": { "type": { "const": "integer" } }
                      },
                      "then": {
                        "properties": {
                          "format": {
                            "description": "There are no format keyword options for `integer`: only `default` is allowed.",
                            "enum": [
                              "default"
                            ],
                            "default": "default"
                          }
                        }
                      }
                    },
                    {
                      "if": {
                        "properties": { "type": { "const": "date" } }
                      },
                      "then": {
                        "properties": {
                          "format": {
                            "description": "The format keyword options for `date` are `default`, `any`, and `{PATTERN}`.",
                            "context": "The following `format` options are supported:\n  * **default**: An ISO8601 format string of YYYY-MM-DD.\n  * **any**: Any parsable representation of a date. The implementing library can attempt to parse the datetime via a range of strategies.\n  * **{PATTERN}**: The value can be parsed according to `{PATTERN}`, which `MUST` follow the date formatting syntax of C / Python [strftime](http://strftime.org/).",
                            "default": "default"
                          }
                        }
                      }
                    },
                    {
                      "if": {
                        "properties": { "type": { "const": "time" } }
                      },
                      "then": {
                        "properties": {
                          "format": {
                            "description": "The format keyword options for `time` are `default`, `any`, and `{PATTERN}`.",
                            "context": "The following `format` options are supported:\n  * **default**: An ISO8601 format string for time.\n  * **any**: Any parsable representation of a date. The implementing library can attempt to parse the datetime via a range of strategies.\n  * **{PATTERN}**: The value can be parsed according to `{PATTERN}`, which `MUST` follow the date formatting syntax of C / Python [strftime](http://strftime.org/).",
                            "default": "default"
                          }
                        }
                      }
                    },
                    {
                      "if": {
                        "properties": { "type": { "const": "datetime" } }
                      },
                      "then": {
                        "properties": {
                          "format": {
                            "description": "The format keyword options for `datetime` are `default`, `any`, and `{PATTERN}`.",
                            "context": "The following `format` options are supported:\n  * **default**: An ISO8601 format string for datetime.\n  * **any**: Any parsable representation of a date. The implementing library can attempt to parse the datetime via a range of strategies.\n  * **{PATTERN}**: The value can be parsed according to `{PATTERN}`, which `MUST` follow the date formatting syntax of C / Python [strftime](http://strftime.org/).",
                            "default": "default"
                          }
                        }
                      }
                    },
                    {
                      "if": {
                        "properties": { "type": { "const": "year" } }
                      },
                      "then": {
                        "properties": {
                          "format": {
                            "description": "There are no format keyword options for `year`: only `default` is allowed.",
                            "default": "default"
                          }
                        }
                      }
                    },
                    {
                      "if": {
                        "properties": { "type": { "const": "yearmonth" } }
                      },
                      "then": {
                        "properties": {
                          "format": {
                            "description": "There are no format keyword options for `yearmonth`: only `default` is allowed.",
                            "default": "default"
                          }
                        }
                      }
                    },
                    {
                      "if": {
                        "properties": { "type": { "const": "boolean" } }
                      },
                      "then": {
                        "properties": {
                          "format": {
                            "description": "There are no format keyword options for `boolean`: only `default` is allowed.",
                            "default": "default"
                          }
                        }
                      }
                    },
                    {
                      "if": {
                        "properties": { "type": { "const": "object" } }
                      },
                      "then": {
                        "properties": {
                          "format": {
                            "description": "There are no format keyword options for `object`: only `default` is allowed.",
                            "default": "default"
                          }
                        }
                      }
                    },
                    {
                      "if": {
                        "properties": { "type": { "const": "geopoint" } }
                      },
                      "then": {
                        "properties": {
                          "format": {
                            "description": "The format keyword options for `geopoint` are `default`,`array`, and `object`.",
                            "context": "The following `format` options are supported:\n  * **default**: A string of the pattern 'lon, lat', where `lon` is the longitude and `lat` is the latitude.\n  * **array**: An array of exactly two items, where each item is either a number, or a string parsable as a number, and the first item is `lon` and the second item is `lat`.\n  * **object**: A JSON object with exactly two keys, `lat` and `lon`",
                            "notes": [
                              "Implementations `MUST` strip all white space in the default format of `lon, lat`."
                            ],
                            "enum": [
                              "default",
                              "array",
                              "object"
                            ],
                            "default": "default"
                          }
                        }
                      }
                    },
                    {
                      "if": {
                        "properties": { "type": { "const": "geojson" } }
                      },
                      "then": {
                        "properties": {
                          "format": {
                            "description": "The format keyword options for `geojson` are `default` and `topojson`.",
                            "context": "The following `format` options are supported:\n  * **default**: A geojson object as per the [GeoJSON spec](http://geojson.org/).\n  * **topojson**: A topojson object as per the [TopoJSON spec](https://github.com/topojson/topojson-specification/blob/master/README.md)",
                            "enum": [
                              "default",
                              "topojson"
                            ],
                            "default": "default"
                          }
                        }
                      }
                    },
                    {
                      "if": {
                        "properties": { "type": { "const": "array" } }
                      },
                      "then": {
                        "properties": {
                          "format": {
                            "description": "There are no format keyword options for `array`: only `default` is allowed.",
                            "default": "default"
                          }
                        }
                      }
                    },
                    {
                      "if": {
                        "properties": { "type": { "const": "duration" } }
                      },
                      "then": {
                        "properties": {
                          "format": {
                            "description": "There are no format keyword options for `duration`: only `default` is allowed.",
                            "default": "default"
                          }
                        }
                      }
                    }
                  ]
                },
                "description": "An `array` of Table Schema Field objects.",
                "examples": [
                  "{\n  \"fields\": [\n    {\n      \"name\": \"my-field-name\"\n    }\n  ]\n}\n",
                  "{\n  \"fields\": [\n    {\n      \"name\": \"my-field-name\",\n      \"type\": \"number\"\n    },\n    {\n      \"name\": \"my-field-name-2\",\n      \"type\": \"string\",\n      \"format\": \"email\"\n    }\n  ]\n}\n"
                ]
              }
            },
            "examples": [
              "{\n  \"schema\": {\n    \"fields\": [\n      {\n        \"name\": \"first_name\",\n        \"type\": \"string\"\n        \"constraints\": {\n          \"required\": true\n        }\n      },\n      {\n        \"name\": \"age\",\n        \"type\": \"integer\"\n      },\n    ],\n  }\n}\n"
            ]
          }
        },
        "minItems": 1,
        "uniqueItems": true
      }
    },
    "references": {
      "title": "Related Documents",
      "description": "Related documents such as technical information about a dataset, developer documentation, etc.",
      "type": "array",
      "items": {
        "type": "string",
        "format": "uri"
      }
    }
  }
}
